<!DOCTYPE html>
<html>
<head> 
  <title>Meli illuminati</title> 
  <style>
  body{
    margin: 0;
    overflow: hidden;
  }

  #stats {  /* Align stats top-left */
    position: absolute;
    left: 0px;
    top: 0px;
  }
  </style> 
</head>
<body>
  <!-- JavaScript libraries -->
  <script src="http://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script> 
  <script src="http://cdnjs.cloudflare.com/ajax/libs/three.js/r67/three.min.js"></script>
  <script src="http://cdnjs.cloudflare.com/ajax/libs/stats.js/r11/Stats.min.js"></script>
  <script src="http://cdnjs.cloudflare.com/ajax/libs/dat-gui/0.5/dat.gui.min.js"></script>
  <script src="assets/libs/TrackballControls.js"></script>
  <!-- Javascript code that runs our Three.js examples --> 
  <script>
    // once everything is loaded, we run our Three.js stuff.
    $(function () {
      var axisHelper = new THREE.AxisHelper( 5 );
      
      var stats = initStats();

      // create a scene, that will hold all our elements such as objects, cameras and lights.
      var scene = new THREE.Scene();

      // create a camera, which defines where we're looking at.
      var camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);

      // create a render and set the size
      var renderer = new THREE.WebGLRenderer();

      // create trackball controls
      var trackballControls = new THREE.TrackballControls(camera);
      var arrayAlberi = new Array();
      renderer.setClearColor(new THREE.Color(0xAAAEEE, 1.0));
      renderer.setSize(window.innerWidth, window.innerHeight);

      // create the ground plane
      var planeGeometry = new THREE.PlaneGeometry(120,120);
      var planeMaterial =  new THREE.MeshLambertMaterial({color: 0xffffff});
      var plane = new THREE.Mesh(planeGeometry,planeMaterial);

      // rotate and position the plane
      plane.rotation.x=-0.5*Math.PI;
      plane.position.set(0,-12,0);

      // add the plane to the scene
      scene.add(plane);

      
      for (var j = 0; j<20; j++) {
        var alberoCompleto = new THREE.Object3D();
        alberoCompleto.position = new THREE.Vector3(0, 0, 0);

        //tronco:
        var geometry = new THREE.CylinderGeometry(1.5, 2, 23, 32);
        var material = new THREE.MeshLambertMaterial( {color: 0x964B00} );
        var tronco = new THREE.Mesh(geometry, material);

        //chioma:
        var sphereGeometry = new THREE.SphereGeometry(4,20,20);
        var sphereMaterial = new THREE.MeshLambertMaterial({color: 0x228b22, wireframe: false});
        var chioma = new THREE.Mesh(sphereGeometry,sphereMaterial);

        for (var i = 0; i < 50; i++) {
                    //mela:
                    var sphereGeometry = new THREE.SphereGeometry(0.4,20,20);
                    var sphereMaterial = new THREE.MeshLambertMaterial({color: 0xD21F1B, wireframe: false});
                    var mela = new THREE.Mesh(sphereGeometry,sphereMaterial);

                    var alpha = Math.random()*Math.PI;    // tra 0 e PI
                    var beta = Math.random()*2*Math.PI - Math.PI;   // ??

                    var x = 4*Math.sin(alpha)*Math.cos(beta);
                    var y = 4*Math.sin(alpha)*Math.sin(beta);
                    var z = 4*Math.cos(alpha);
                    mela.position.set(x,y,z);
                    chioma.add(mela);
                  }
                  chioma.position.set(0,15,0);

                  alberoCompleto.add(tronco);
                  alberoCompleto.add(chioma);

                  var x = Math.random()*120-60;
                  var y = Math.random()*120-60;
                  alberoCompleto.position.set(x,0,y);


                  arrayAlberi[j] = alberoCompleto;
                }






      // position and point the camera to the center of the scene
      camera.position.set(-30,40,30);
      camera.up = new THREE.Vector3(0,1,0);
      camera.lookAt(scene.position);

      // add subtle ambient lighting
      var ambiColor = "#0c0c0c";
      var ambientLight = new THREE.AmbientLight(ambiColor);
      scene.add(ambientLight);

      // add spotlight for the shadows
      var spotLight = new THREE.SpotLight( 0xAAAFFF );
      spotLight.position.set(0,0,0);
      scene.add(spotLight);

      // add a small sphere simulating the pointlight
      var sphereLight = new THREE.SphereGeometry(0.2);
      var sphereLightMaterial = new THREE.MeshBasicMaterial({color: 0xac6c25});
      var sphereLightMesh = new THREE.Mesh(sphereLight, sphereLightMaterial);
      sphereLightMesh.castShadow = true;

      sphereLightMesh.position = new THREE.Vector3(0,0,0);
      scene.add(sphereLightMesh);

      // add point light
      //Colore "iniziale" della luce illuminazione generale.
      var pointColor = "#AAAAAA";
      var pointLight = new THREE.PointLight(pointColor);
      //raggio d'azione della luce.
      pointLight.distance = 300;
      // posiziono la luce nella stessa posizione della sphereLightMesh
      pointLight.position = sphereLightMesh.position;
      scene.add(pointLight);
      

      scene.add( axisHelper );


      // add the output of the renderer to the html element
      $('body').append(renderer.domElement);

      // call the render function
      var step = 0;

      var controls = new function () {
        this.rotationSpeed = 0.03;
        this.bouncingSpeed = 0.03;
        this.ambientColor = ambiColor;
        this.pointColor = pointColor;
        this.intensity = 1;
        this.distance = 100;
      }

      var gui = new dat.GUI();
      gui.addColor(controls, 'ambientColor').onChange(function (e) {
        ambientLight.color = new THREE.Color(e);
      });

      gui.addColor(controls, 'pointColor').onChange(function (e) {
        pointLight.color = new THREE.Color(e);
      });

      gui.add(controls, 'intensity', 0, 3).onChange(function (e) {
        pointLight.intensity = e;
      });

      gui.add(controls, 'distance', 0, 100).onChange(function (e) {
        pointLight.distance = e;
      });

      render();

      function render() {
        stats.update();
        // render using requestAnimationFrame
        for (var i = 0; i < arrayAlberi.length; i++) {
//          arrayAlberi[i].rotation.y += 0.05;
          arrayAlberi[i].rotation.x += 0.05;
          arrayAlberi[i].rotation.z += 0.15;
          scene.add(arrayAlberi[i]);
        }
        
        trackballControls.update();
        requestAnimationFrame(render);
        renderer.render(scene, camera);
      }

      function initStats() {
        var stats = new Stats();
        stats.setMode(0); // 0: fps, 1: ms
        $('body').append(stats.domElement);
        return stats;
      }
    });
</script>  
</body>
</html>
